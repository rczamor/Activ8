<?php
// $Id: fullcalendar.module,v 1.1.2.1 2010/11/14 04:06:47 ablondeau Exp $
/**
 * @file
 * Provides a views style plugin for FullCalendar
 */
 
/**
* implementation of hook_views_api()
*/
function fullcalendar_views_api() {
  return array(
    'api' => '2',
    'path' => drupal_get_path('module', 'fullcalendar'),
  );
}

function fullcalendar_init() {
  drupal_add_css(drupal_get_path('module', 'fullcalendar') .'/fullcalendar.css', 'module');
  drupal_add_js(drupal_get_path('module', 'fullcalendar') .'/fullcalendar.js', 'module');
}

//Pass through to template_preprocess_views_view_fields so that fields will be available to template file
//function template_preprocess_views_view_fields_fullcalendar(&$vars) {	
//  template_preprocess_views_view_fields($vars);
//}

function fullcalendar_set_display_times($node, $field_name, &$vars){
  //$vars['start'] = $node->{$field_name}[0]['value'];
  //$vars['end'] = $node->{$field_name}[0]['value2'];
  
  //Pass times through date modules date_formatter_process function to translate them to the right display times
  $dfp_info = array('#node' => $node, '#field_name' => $field_name, '#formatter' => NULL, '#item' => $node->{$field_name}[0]);
  $dfp = date_formatter_process($dfp_info);
  $vars['start'] = $dfp['value']['local']['datetime'];
  $vars['end'] = $dfp['value2']['local']['datetime'];
}

/**
 * Implementation of hook_theme().
 */
function fullcalendar_theme() {
  return array(
    'fullcalendar_classname' => array(
      'arguments' => array('node' => NULL),
    ),
  );
}

/**
 * Construct CSS classes for a node.
 *
 * @param $node
 *   An object representing the node.
 *
 * @return
 *   A string suitable for use as a CSS class.
 */
function theme_fullcalendar_classname($node) {
  $className = array(
    'fc-event-default',
    $node->type,
  );
  return implode(' ', $className);
}

//Prepare variables for template file invoked for node row type
function template_preprocess_views_view_node_fullcalendar(&$vars) {
  $options = $vars['options'];

  // Make sure the variables are defined.
  $vars['title'] = '';
  $vars['start'] = '';
  $vars['end'] = '';
  $vars['url'] = '';
  $vars['node'] = '';
  $vars['allDay'] = FALSE;
  $vars['className'] = '';
  
  $nid = $vars['row']->{$vars['field_alias']};
    if (!is_numeric($nid)) {
    return;
  }

  $node = node_load($nid);
  

  if (empty($node)) {
    return;
  }
  
  $vars['className'] = theme('fullcalendar_classname', $node);
  $vars['node'] = $node;
  $vars['title'] = $node->title;
  $vars['url'] = url('node/'. $nid);
  //echo str_replace(" ","&nbsp;",str_replace("\n","<br>",htmlspecialchars(print_r($node,true))));
  if ($options['fullcalendar_url_field']) {
    if (isset($node->{$options['fullcalendar_url_field']}[0]['value'])) {
      $vars['url'] = $node->{$options['fullcalendar_url_field']}[0]['value'];
    }
  }
  
  //store field info in a static so it doesn't have to be loaded for every row
  static $fields_info;
  if (!(is_array($fields_info))) {
    $fields_info = array();
  }
  
  //find datetime field (strip tags in case one of the wysiwyg's adds tags)
  $date_fields = trim(strip_tags($options['fullcalendar_date_fields']));
  if ($date_fields) {
    $date_fields = explode("\n", $date_fields);
    foreach ($date_fields as $date_field) {
      if ($date_field == 'node_created') {
        $vars['start'] = format_date($node->created, 'custom', 'Y-m-j H:i:s');
        break;
      }
      if ($date_field == 'node_changed') {
        $vars['start'] = format_date($node->changed, 'custom', 'Y-m-j H:i:s');
        break;
      }
      //if field exists and it is a date or datetime
      if ((isset($node->{$date_field})) && in_array($node->{$date_field}[0]['date_type'], array('datetime', 'date', 'datestamp'))) {
        fullcalendar_set_display_times($node, $date_field, &$vars);
        break;
      }
    }
  }
  //if no specified datetime field then search all fields and use first date or datetime field
  else {
    $node_ary = (array) $node;
    foreach ($node_ary as $key => $value) {
      if (preg_match('/field_.*/', $key)) {
        if ((isset($value[0]['date_type'])) and (($value[0]['date_type'] == 'datetime') or ($value[0]['date_type'] == 'date'))) {

          // If no end date is set, copy start date for processing
          if (empty($value[0]['value2'])) {
            $value[0]['value2'] = $value[0]['value'];
          }
        
          if ($field = content_fields($key)) {
            // Get DateTime objects with timezone support
            $date1 = date_create($value[0]['value'], timezone_open($value[0]['timezone_db']));
            date_timezone_set($date1, timezone_open($value[0]['timezone']));
            $date2 = date_create($value[0]['value2'], timezone_open($value[0]['timezone_db']));
            date_timezone_set($date2, timezone_open($value[0]['timezone']));

            // Get the max increment for minutes and seconds
            $increment = isset($field['widget']['increment']) ? $field['widget']['increment'] : 1;
            $tmp = date_seconds('s', TRUE, $increment);
            $max_seconds = array_pop($tmp);
            $tmp = date_minutes('i', TRUE, $increment);
            $max_minutes = array_pop($tmp);

            // Get the most specific granularity
            $granularity = date_granularity($field);
            $granularity = array_pop($granularity);
            
            // Mirror date module's handing of all day events
            switch ($granularity) {
              case 'second':
                $min_comp = date_format($date1, 'H:i:s') == '00:00:00';
                $max_comp = date_format($date2, 'H:i:s') == '00:00:00' || date_format($date2, 'H:i:s') == '23:'. $max_minutes .':'. $max_seconds;
                break;
              case 'minute':
                $min_comp = date_format($date1, 'H:i') == '00:00';
                $max_comp = date_format($date2, 'H:i:s') == '00:00:00' || date_format($date2, 'H:i') == '23:'. $max_minutes;
                break;
              case 'hour':
                $min_comp = date_format($date1, 'H') == '00';
                $max_comp = date_format($date2, 'H:i:s') == '00:00:00' || date_format($date2, 'H') == '23';
                break;
              default:
                $min_comp = TRUE;
                $max_comp = FALSE;
            }

            // If granularity did not include time, set to All Day
            $fields_info[$key]['allDay'] = (date_has_time(date_granularity($field))) ? ($min_comp && $max_comp) : TRUE;
          }
          
          $vars['allDay'] = $fields_info[$key]['allDay'];
          
          fullcalendar_set_display_times($node, $key, &$vars);
        }
      }
    }
  }
}
