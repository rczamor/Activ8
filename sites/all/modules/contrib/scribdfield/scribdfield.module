<?php
// $Id: scribdfield.module,v 1.1 2009/11/17 19:06:34 marcingy Exp $

/**
 * @file
 * Enables CCK FileField integration with Scribd.com.
 */

/**
 * Implementation of hook_menu().
 */
function scribdfield_menu() {
  $items['admin/settings/scribdfield'] = array(
    'access arguments'  => array('administer site configuration'),
    'description'       => 'Configure ScribdField integration with Scribd.com.',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('scribdfield_settings'),
    'title'             => 'ScribdField',
  );

  return $items;
}

/**
 * Configure ScribdField integration with Scribd.com.
 */
function scribdfield_settings() {
  $form['scribdfield_server'] = array(
    '#collapsible'   => TRUE,
    '#title'         => t('Scribd.com API information'),
    '#type'          => 'fieldset',
  );
  $form['scribdfield_server']['scribd_api_key'] = array(
    '#default_value' => variable_get('scribd_api_key', NULL),
    '#title'         => t('Scribd.com API key'),
    '#type'          => 'textfield',
  );

  return system_settings_form($form);
}

/**
 * Implementation of hook_elements().
 */
function scribdfield_elements() {
  $filefield_elements = filefield_elements();
  $elements['scribdfield_widget'] = $filefield_elements['filefield_widget'];
  $elements['scribdfield_widget']['#process'][] = 'scribdfield_widget_process';
  return $elements;
}

/**
 * Implementation of CCK's hook_widget_info().
 */
function scribdfield_widget_info() {
  return array(
    'scribdfield_widget' => array(
      'label'         => t('Scribd Upload'),
      'field types'   => array('filefield'),
      'callbacks'     => array('default value' => CONTENT_CALLBACK_CUSTOM),
      'description'   => t('A widget which sends its uploaded files to Scribd.com.'),
    ),
  );
}

/**
 * Implementation of CCK's hook_widget().
 */
function scribdfield_widget(&$form, &$form_state, $field, $items, $delta = 0) {
  return filefield_widget($form, $form_state, $field, $items, $delta);
}

/**
 * Form API #process callback; see hook_elements().
 */
function scribdfield_widget_process($element, $edit, &$form_state, $form) {
  if (_form_button_was_clicked($element['filefield_remove'])) {
    unset($element['#value']['data']['scribd_doc_id']);
    unset($element['#value']['data']['scribd_access_key']);
    unset($element['#value']['data']['scribd_secret_password']);
    $_SESSION['scribfield_removed_files'][$element['#delta']]++;
  }

  // we have no way of knowing if someone has a) edited the node, b) clicked
  // Remove, c) uploaded a new file to the same delta. For some reason, the
  // 'data' elements are retained even during such a workflow, so we have to
  // keep track of deleted files in SESSION - if they have, we always wipe
  // out our custom values there, so that the file can be handled on presave.
  if ($_SESSION['scribfield_removed_files'][$element['#delta']]) {
    unset($element['#value']['data']['scribd_doc_id']);
    unset($element['#value']['data']['scribd_access_key']);
    unset($element['#value']['data']['scribd_secret_password']);
  }

  if (!empty($element['#value']['filepath'])) {
    $element['data']['scribdfield_warning'] = array(
      '#type'   => 'markup', // we don't handle any remote file deletion, so let the user know. AND MAKE 'EM DO THE LEGWORK. HAHAHAHAH.
      '#value'  => t('<div class="description">Files intended for Scribd.com are not sent until this entire form has been saved. Uploaded files are <strong>never</strong> automatically removed from Scribd.com: if you remove the file or delete this content, you\'ll also need to manually remove them from Scribd\'s "My Docs".</div>'),
    );
  }

  return $element;
}

/**
 * Implementation of hook_nodeapi().
 */
function scribdfield_nodeapi(&$node, $op, $teaser, $page) {
  switch ($op) {
    case 'presave':
      foreach ($node as $node_key => $node_value) {
        if (strpos($node_key, 'field_') !== FALSE) {
          $field = content_fields($node_key, $node->type);
          if ($field['widget']['module'] == 'scribdfield') {
            unset($_SESSION['scribfield_removed_files']);
            // see scribdfield_widget_process() for sets.

            foreach ($node->{$node_key} as $field_delta => $field_value) {
              if (!empty($node->{$node_key}[$field_delta]['filepath']) && empty($node->{$node_key}[$field_delta]['data']['scribd_doc_id'])) {
                $response_xml = scribdfield_api_upload($node->{$node_key}[$field_delta]['filepath']);
                if ($response_xml->attributes()->stat == 'ok') {
                  $node->{$node_key}[$field_delta]['data']['scribd_doc_id']           = (string) $response_xml->doc_id;
                  $node->{$node_key}[$field_delta]['data']['scribd_access_key']       = (string) $response_xml->access_key;
                  $node->{$node_key}[$field_delta]['data']['scribd_secret_password']  = (string) $response_xml->secret_password;
                  drupal_set_message(t('@filepath has been uploaded to Scribd.com.',
                    array('@filepath' => $node->{$node_key}[$field_delta]['filepath'])));
                }
                else {
                  drupal_set_message(t('@filepath could not be uploaded to Scribd.com: @error.', // thank you, usable error messages.
                    array('@filepath' => $node->{$node_key}[$field_delta]['filepath'], '@error' => $response_xml->error->attributes()->message)), 'error');
                }
              }
            }
          }
        }
      }
      break;

    case 'delete':
      foreach ($node as $node_key => $node_value) {
        if (strpos($node_key, 'field_') !== FALSE) {
          $field = content_fields($node_key, $node->type);
          if ($field['widget']['module'] == 'scribdfield') {
            foreach ($node->{$node_key} as $field_delta => $field_value) {
              if (!empty($node->{$node_key}[$field_delta]['filepath']) && !empty($node->{$node_key}[$field_delta]['data']['scribd_doc_id'])) {
                $files_were_uploaded_to_scribd_so_warn_the_user_mmkay = 1;
              }
            }
          }
        }
      }

      if (isset($files_were_uploaded_to_scribd_so_warn_the_user_mmkay)) { // yeah. that's how I roll.
        drupal_set_message(t('Files were uploaded to Scribd.com: you\'ll need to manually remove them from Scribd\'s "My Docs".'), 'warning');
      }

      break;
  }
}

/**
 * Uses Scribd's docs.upload API function to send uploaded file along.
 */
function scribdfield_api_upload($file) {
  $params['file']     = '@' . $file;
  $params['method']   = 'docs.upload';
  $params['api_key']  = variable_get('scribd_api_key', NULL);

  $ch = curl_init(); // slightly simpler than drupal's version.
  curl_setopt($ch, CURLOPT_URL, 'http://api.scribd.com/api');
  curl_setopt($ch, CURLOPT_RETURNTRANSFER,1);
  curl_setopt($ch, CURLOPT_POST, 1);
  curl_setopt($ch, CURLOPT_POSTFIELDS, $params);
  return new SimpleXMLElement(curl_exec($ch));
}

/**
 * Implementation of hook_theme().
 */
function scribdfield_theme($existing, $type, $theme, $path) {
  return array(
    'scribdfield_widget' => array(
      'arguments' => array('element' => NULL),
    ),
    'scribdfield_formatter_ipaper' => array(
      'arguments' => array('element' => NULL),
    ),
  );
}

/**
 * Implementation of hook_field_formatter_info().
 */
function scribdfield_field_formatter_info() {
  return array(
    'ipaper' => array(
      'label' => t('iPaper'),
      'field types' => array('filefield'),
      'description' => t('Displays uploaded Scribd.com files in iPaper.'),
    ),
  );
}

/**
 * Implementation of hook_form_[form_id]_alter().
 */
function scribdfield_form_content_field_overview_form_alter(&$form, &$form_state) {
  $form['#submit'][] = 'scribdfield_form_content_field_overview_submit';
}

/**
 * Submit handler to set a new scribdfield's formatter to "ipaper".
 */
function scribdfield_form_content_field_overview_submit(&$form, &$form_state) {
  if (isset($form_state['fields_added']['_add_new_field']) && isset($form['#type_name'])) {
    $field = content_fields($form_state['fields_added']['_add_new_field'], $form['#type_name']);
    if ($field['widget']['module'] == 'scribdfield') {
      foreach ($field['display_settings'] as $display_type => $display_settings) {
        if ($field['display_settings'][$display_type]['format'] == 'default') {
          $field['display_settings'][$display_type]['format'] = 'ipaper';
        }
      }

      content_field_instance_update($field);
    }
  }
}

/**
 * FormAPI theme function. Theme the output of an image field.
 */
function theme_scribdfield_widget(&$element) {
  return theme('form_element', $element, $element['#children']);
}

/**
 * Display a Scribd.com file via iPaper.
 */
function theme_scribdfield_formatter_ipaper($element) {
  if (is_array($element['#item']['data'])) {
    $data = $element['#item']['data'];
    $output  = '<object codebase="http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=9,0,0,0" id="doc_' . $data['scribd_doc_id'] . '" name="doc_' . $data['scribd_doc_id'] . '" classid="clsid:d27cdb6e-ae6d-11cf-96b8-444553540000" align="middle" height="500" width="100%" rel="media:document" resource="http://d.scribd.com/ScribdViewer.swf?document_id=' . $data['scribd_doc_id'] . '&amp;access_key=' . $data['scribd_access_key'] . '&amp;page=1&amp;version=1&amp;viewMode=" xmlns:media="http://search.yahoo.com/searchmonkey/media/" xmlns:dc="http://purl.org/dc/terms/">';
    $output .=  '<param name="movie" value="http://d.scribd.com/ScribdViewer.swf?document_id=' . $data['scribd_doc_id'] . '&amp;access_key=' . $data['scribd_access_key'] . '&amp;page=1&amp;version=1&amp;viewMode=">';
    $output .=  '<param name="quality" value="high"><param name="play" value="true"><param name="loop" value="true"><param name="scale" value="showall"><param name="wmode" value="opaque"><param name="devicefont" value="false">';
    $output .=  '<param name="bgcolor" value="#ffffff"><param name="menu" value="true"><param name="allowFullScreen" value="true"><param name="allowScriptAccess" value="always"><param name="salign" value="">';
    $output .=  '<embed src="http://d.scribd.com/ScribdViewer.swf?document_id=' . $data['scribd_doc_id'] . '&amp;access_key=' . $data['scribd_access_key'] . '&amp;page=1&amp;version=1&amp;viewMode=" quality="high" pluginspage="http://www.macromedia.com/go/getflashplayer" play="true" loop="true" scale="showall" wmode="opaque" devicefont="false" bgcolor="#FFFFFF" name="doc_' . $data['scribd_doc_id'] . '_object" menu="true" allowfullscreen="true" allowscriptaccess="always" salign="" type="application/x-shockwave-flash" align="middle" height="500" width="100%">';
    $output .= '</object>';
    return $output;
  }
}
